{% extends 'base.html.twig' %}

{% block title %}Voitures Disponibles{% endblock %}

{% block body %}

    {% include '_partials/header_steps.html.twig' %}

    <div class="section__container" >
        {# CARS RECOMMENDED #}
        <h2 style="margin-top: 8rem;">Véhicules recommandés</h2>
        <div class="recommended-cars">
            <div class="carousel">
                <button class="carousel-prev">&#10094;</button>
                <div class="carousel-container">
                    {% for car in recommendedCars %}
                        {% set TotalPerDay = car.dayprice * days %}
                        <div class="carousel-item">
                            <div class="card">
                                <div class="card-header">
                                    <span>{{ car.brand }} {{ car.model }}</span>
                                </div>
                                <div class="card-body">
                                    <div class="card-body__left">
                                        <img src="{{ asset('assets/images/' ~ car.image) }}" alt="{{ car.brand }} {{ car.model }}">
                                    </div>
                                    <div class="card-body__right">
                                        <p>À PARTIR DE</p>
                                        <p class="price-text">{{ car.dayprice }} € / jour</p>
                                        <h4 style="color: #919191;margin-bottom: 1.5rem;">
                                            TOTAL <span style="color: #fe5c3c;">{{ TotalPerDay }} €</span>
                                            <p style="color:#c3c3c3;"><span style="font-weight: bold;color: #919191;"> {{ days }} jrs </span> de location</p>
                                        </h4>
                                        <a href="{{ path('app_cars_available_details', { id: car.id }) }}" class="select-btn">Sélectionner</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                <button class="carousel-next">&#10095;</button>
            </div>
        </div>

     {# Section filtrée dynamiquement #}
        <div id="filtered-cars">
            {% include 'availablecars/_cars_list.html.twig' %}
        </div>
    </div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const filters = {
        price: null,
        gearbox: null,
        doors: null,
        passengers: null,
        electric: null,
        startDate: '{{ app.session.get("startDate") }}',
        endDate: '{{ app.session.get("endDate") }}',
        startTime: '{{ app.session.get("startTime") }}',
        endTime: '{{ app.session.get("endTime") }}',
        pickupLocation: '{{ app.session.get("pickupLocationName") }}',
        dropoffLocation: '{{ app.session.get("dropoffLocationName") }}'
    };

    function attachFilterEvents() {
        document.querySelectorAll(".filter-dropdown .dropdown-item").forEach(item => {
            item.addEventListener("click", function () {
                const filterType = this.closest(".filter-dropdown").id.replace("filter-", "");
                toggleFilter(filterType, this.dataset.filter, this);
            });
        });
    }

    function toggleFilter(type, value, element) {
        const button = document.querySelector(`#filter-${type} .filter-btn`);
        const filterTextElement = document.querySelector(`#filter-${type}-text`);

        if (filters[type] === value) {
            filters[type] = null;
            element.classList.remove('active-bg');
            button.classList.remove('active');
            resetFilterText(type);
        } else {
            filters[type] = value;
            document.querySelectorAll(`#filter-${type} .dropdown-item`).forEach(item => {
                item.classList.remove('active-bg');
            });
            element.classList.add('active-bg');
            button.classList.add('active');
            updateFilterText(type, value, filterTextElement);
        }

        fetchFilteredCars();
    }

    function updateFilterText(type, value, element) {
        switch (type) {
            case 'price':
                element.innerHTML = value === 'asc' ? 'Trier par: Prix croissant <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>' : 'Trier par: Prix décroissant <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
            case 'gearbox':
                element.innerHTML = `Transmission: ${value} <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>`;
                break;
            case 'doors':
                element.innerHTML = `Nombre de Portes: ${value} portes <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>`;
                break;
            case 'passengers':
                element.innerHTML = `Passagers: ${value}+ <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>`;
                break;
            case 'electric':
                element.innerHTML = value === 'electric' ? 'Type de Véhicule: Électrique <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>' : 'Type de Véhicule: Pas électrique <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
        }
    }

    function resetFilterText(type) {
        const element = document.querySelector(`#filter-${type}-text`);
        switch (type) {
            case 'price':
                element.innerHTML = 'Trier par <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
            case 'gearbox':
                element.innerHTML = 'Transmission <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
            case 'doors':
                element.innerHTML = 'Nombre de Portes <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
            case 'passengers':
                element.innerHTML = 'Passagers <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
            case 'electric':
                element.innerHTML = 'Type de Véhicule <i style="font-size:1.2rem;" class="ri-arrow-down-s-line"></i>';
                break;
        }
    }

    function applyActiveStates() {
        Object.keys(filters).forEach(type => {
            if (filters[type]) {
                const button = document.querySelector(`#filter-${type} .filter-btn`);
                const filterTextElement = document.querySelector(`#filter-${type}-text`);

                if (button) {
                    button.classList.add('active');
                }

                document.querySelectorAll(`#filter-${type} .dropdown-item`).forEach(item => {
                    if (item.dataset.filter === filters[type]) {
                        item.classList.add('active-bg');
                        updateFilterText(type, filters[type], filterTextElement);
                    }
                });
            }
        });
    }

    function fetchFilteredCars() {
    const query = new URLSearchParams();

    // Ajout des filtres
    if (filters.price) query.set('price', filters.price);
    if (filters.gearbox) query.set('gearbox', filters.gearbox);
    if (filters.doors) query.set('doors', filters.doors);
    if (filters.passengers) query.set('passengers', filters.passengers);
    if (filters.electric) query.set('electric', filters.electric);

    query.set('startDate', filters.startDate);
    query.set('endDate', filters.endDate);
    query.set('startTime', filters.startTime);
    query.set('endTime', filters.endTime);
    query.set('pickupLocation', filters.pickupLocation);
    query.set('dropoffLocation', filters.dropoffLocation);

    fetch(`/cars/available?${query.toString()}`, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest' // Indiquer que c'est une requête AJAX
        }
    })
    .then(response => response.text())
    .then(data => {
        document.getElementById("filtered-cars").innerHTML = data;

     
         // Réattache les événements et réinitialise les scripts
                attachFilterEvents();
                applyActiveStates();
                initializeCarousel();  // Réinitialise le carousel
                initializeHeaderScripts();  // Réinitialise les scripts du header
    })
    .catch(error => console.error('Erreur:', error));
}

    function initializeCarousel() {
        const prevButton = document.querySelector('.carousel-prev');
        const nextButton = document.querySelector('.carousel-next');
        const carouselContainer = document.querySelector('.carousel-container');
        const carouselItems = document.querySelectorAll('.carousel-item');
        let currentIndex = 0;
        const totalItems = carouselItems.length;
        const itemsToShow = 3;

        function updateCarousel() {
            const width = carouselItems[0].clientWidth;
            carouselContainer.style.transform = `translateX(${-currentIndex * width}px)`;
        }

        nextButton.addEventListener('click', () => {
            if (currentIndex < totalItems - itemsToShow) {
                currentIndex++;
            } else {
                currentIndex = 0;
            }
            updateCarousel();
        });

        prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
            } else {
                currentIndex = totalItems - itemsToShow;
            }
            updateCarousel();
        });

        window.addEventListener('resize', updateCarousel);
        updateCarousel(); // Initial update on page load
    }

    function initializeHeaderScripts() {
        const steps = document.querySelectorAll('.step-1, .step-2, .step-3, .step-4');
        const stepDetails = document.querySelectorAll('.step-details, .step-details2, .step-details3, .step-details4');
        const header = document.getElementById('header');

        window.addEventListener('scroll', function () {
            let scrollTop = window.scrollY;

            if (scrollTop > 100) {
                stepDetails.forEach((detail) => {
                    detail.style.transition = 'opacity 0.5s ease, height 0.5s ease';
                    detail.style.opacity = '0';
                    detail.style.height = '0';
                });

                steps.forEach((step) => {
                    step.style.transition = 'height 0.5s ease';
                    step.style.height = '48px';
                });

                header.style.transition = 'height 0.5s ease';
                header.style.height = 'auto';
            } else {
                stepDetails.forEach((detail) => {
                    detail.style.transition = 'opacity 0.5s ease, height 0.5s ease';
                    detail.style.opacity = '1';
                    detail.style.height = 'auto';
                });

                steps.forEach((step) => {
                    step.style.transition = 'height 0.5s ease';
                    step.style.height = 'auto';
                });

                header.style.transition = 'height 0.5s ease';
                header.style.height = 'auto';
            }
        });
    }

    attachFilterEvents();
    applyActiveStates();
    initializeCarousel(); // Initialisation du carousel au chargement de la page
    initializeHeaderScripts(); // Initialisation des scripts du header au chargement de la page
});
</script>


{% include '_partials/footer.html.twig' %}
{% endblock %}

